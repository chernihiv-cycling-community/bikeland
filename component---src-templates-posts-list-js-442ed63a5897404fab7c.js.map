{"version":3,"sources":["webpack:///./src/components/Pagination/styled.js","webpack:///./src/components/Pagination/index.js","webpack:///./src/templates/posts-list.js"],"names":["PaginationWrapper","styled","ul","media","lessThan","Pagination","isFirst","isLast","currentPage","numPages","prevPage","nextPage","useTranslations","next","prev","of","LocalizedLink","to","query","Blog","props","postList","data","allMarkdownRemark","edges","pageContext","title","TitlePage","text","map","node","frontmatter","background","category","date","description","image","timeToRead","slug","fields","PostItem"],"mappings":"2XAGO,IAAMA,EAAoBC,IAAOC,GAAV,gFAAGD,CAAH,mQAQ1BE,IAAMC,SAAS,QAAfD,CAR0B,MC0CfE,EAtCI,SAAC,GAOb,IANLC,EAMI,EANJA,QACAC,EAKI,EALJA,OACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,SACAC,EACI,EADJA,SACI,EACuBC,cAAnBC,EADJ,EACIA,KAAMC,EADV,EACUA,KAAMC,EADhB,EACgBA,GAEpB,OACE,kBAAC,EAAD,KACE,6BACIT,GACA,kBAACU,EAAA,EAAD,CAAeC,GAAIP,GAAnB,KAAgCI,IAGpC,2BACGN,EADH,IACiBO,EADjB,IACsBN,GAEtB,6BACIF,GACA,kBAACS,EAAA,EAAD,CAAeC,GAAIN,GAAWE,EAA9B,S,YCsCGK,EAAK,aAqCHC,UA9FF,SAAAC,GACX,IAAMC,EAAWD,EAAME,KAAKC,kBAAkBC,MAD1B,EAIcJ,EAAMK,YAAhCjB,EAJY,EAIZA,YAAaC,EAJD,EAICA,SACfH,EAA0B,IAAhBE,EACVD,EAASC,IAAgBC,EACzBC,EAAWF,EAAc,GAAM,EAAI,QAAxB,UAA2CA,EAAc,GACpEG,EAAQ,eAAiBH,EAAc,GAE7C,OACE,oCACE,kBAAC,IAAD,CAAKkB,MAAM,SACX,kBAACC,EAAA,EAAD,CAAWC,KAAK,SAEhB,kBAAC,IAAD,KACGP,EAASQ,KACR,oBACEC,KADF,IAEIC,YACEC,EAHN,EAGMA,WACAC,EAJN,EAIMA,SACAC,EALN,EAKMA,KACAC,EANN,EAMMA,YACAT,EAPN,EAOMA,MACAU,EARN,EAQMA,MAEFC,EAVJ,EAUIA,WACUC,EAXd,EAWIC,OAAUD,KAXd,OAcE,kBAACE,EAAA,EAAD,CACEF,KAAI,SAAWA,EACfN,WAAYA,EACZC,SAAUA,EACVC,KAAMA,EACNG,WAAYA,EACZX,MAAOA,EACPS,YAAaA,EACbC,MAAOA,QAMf,kBAAC,EAAD,CACE9B,QAASA,EACTC,OAAQA,EACRC,YAAaA,EACbC,SAAUA,EACVC,SAAUA,EACVC,SAAUA","file":"component---src-templates-posts-list-js-442ed63a5897404fab7c.js","sourcesContent":["import styled from 'styled-components';\nimport media from 'styled-media-query';\n\nexport const PaginationWrapper = styled.ul`\n  align-items: center;\n  border-top: 1px solid var(--borders);\n  color: var(--texts);\n  display: flex;\n  padding: 1.5rem 3rem;\n  justify-content: space-between;\n  list-style: none;\n  ${media.lessThan('large')`\n    padding: 1rem;\n  `}\n\n  a {\n    color: var(--texts);\n    text-decoration: none;\n    transition: color 0.5s;\n    &:hover {\n      color: var(--highlight);\n    }\n  }\n`;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport LocalizedLink from '../LocalizedLink';\nimport useTranslations from '../useTranslations';\n\nimport * as S from './styled';\n\nconst Pagination = ({\n  isFirst,\n  isLast,\n  currentPage,\n  numPages,\n  prevPage,\n  nextPage,\n}) => {\n  const { next, prev, of } = useTranslations();\n\n  return (\n    <S.PaginationWrapper>\n      <li>\n        {!isFirst && (\n          <LocalizedLink to={prevPage}>← {prev}</LocalizedLink>\n        )}\n      </li>\n      <p>\n        {currentPage} {of} {numPages}\n      </p>\n      <li>\n        {!isLast && (\n          <LocalizedLink to={nextPage}>{next} →</LocalizedLink>\n        )}\n      </li>\n    </S.PaginationWrapper>\n  );\n};\n\nPagination.propTypes = {\n  isFirst: propTypes.bool.isRequired,\n  isLast: propTypes.bool.isRequired,\n  currentPage: propTypes.number.isRequired,\n  numPages: propTypes.number.isRequired,\n  prevPage: propTypes.string,\n  nextPage: propTypes.string,\n};\n\nexport default Pagination;\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PostItem from \"../components/PostItem\"\nimport TitlePage from \"../components/TitlePage\"\nimport SEO from \"../components/seo\"\n\nimport Pagination from \"../components/Pagination\"\n\nimport * as S from \"../components/ListWrapper/styled\"\n\nconst Blog = props => {\n  const postList = props.data.allMarkdownRemark.edges\n\n  // Logic for Pagination Component\n  const { currentPage, numPages } = props.pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? \"/blog\" : `/blog/${currentPage - 1}`\n  const nextPage = `/blog/page/${currentPage + 1}`\n\n  return (\n    <>\n      <SEO title=\"Blog\" />\n      <TitlePage text=\"Blog\" />\n\n      <S.ListWrapper>\n        {postList.map(\n          ({\n            node: {\n              frontmatter: {\n                background,\n                category,\n                date,\n                description,\n                title,\n                image\n              },\n              timeToRead,\n              fields: { slug }\n            }\n          }) => (\n            <PostItem\n              slug={`/blog/${slug}`}\n              background={background}\n              category={category}\n              date={date}\n              timeToRead={timeToRead}\n              title={title}\n              description={description}\n              image={image}\n            />\n          )\n        )}\n      </S.ListWrapper>\n\n      <Pagination\n        isFirst={isFirst}\n        isLast={isLast}\n        currentPage={currentPage}\n        numPages={numPages}\n        prevPage={prevPage}\n        nextPage={nextPage}\n      />\n    </>\n  )\n}\n\nexport const query = graphql`\n  query PostsList(\n    $locale: String!\n    $dateFormat: String!\n    $skip: Int!\n    $limit: Int!\n  ) {\n    allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      filter: {\n        fields: { locale: { eq: $locale } }\n        fileAbsolutePath: { regex: \"/(blog)\\/.*.md$/\" }\n      }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            description\n            category\n            background\n            image\n            date(formatString: $dateFormat)\n          }\n          timeToRead\n          fields {\n            locale\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Blog\n"],"sourceRoot":""}